{"name":"data-structures","tagline":"Common data structures for the go (golang) programming language.","body":"# Go Data Structures\r\n\r\nby Tim Henderson (tim.tadh@gmail.com)\r\n\r\nCopyright 2013, Licensed under the GPL version 2. Please reach out to me\r\ndirectly if you require another licensing option. I am willing to work with you.\r\n\r\n## Purpose\r\n\r\nTo collect many important data structures for usage in go programs. Golang's\r\nstandard library lacks many useful and important structures. This library\r\nattempts to fill the gap. I have implemented data-structure's as I have needed\r\nthem. If there is a missing structure or even just a missing (or incorrect)\r\nmethod open an issue, send a pull request, or send an email patch.\r\n\r\nThe library also provides generic types to allow the user to swap out various\r\ndata structures transparently. The interfaces provide operation for adding,\r\nremoving, retrieving objects from collections as well as iterating over the\r\ncollection using functional iterators.\r\n\r\nFinally, the tree sub-package provides a variety of generic tree traversals. The\r\ntree traversals and other iterators in the package use a functional iteration\r\ntechnique [detailed on my blog](\r\nhttp://hackthology.com/functional-iteration-in-go.html).\r\n\r\nI hope you find my library useful. If you are using it drop me a line I would\r\nlove to hear about it.\r\n\r\n# Current Collection\r\n\r\n[godoc](https://godoc.org/github.com/timtadh/data-structures)\r\n\r\n## Lists\r\n\r\n### Array List `list.List`\r\n\r\nSimilar to a Java ArrayList or a Python or Ruby \"list\". There is a version\r\n(called Sortable) which integrates with the `\"sort\"` package from the standard\r\nlibrary.\r\n\r\n### Sorted Array List `list.Sorted`\r\n\r\nKeeps the ArrayList in sorted order for you.\r\n\r\n### Sorted Set `set.SortedSet`\r\n\r\nBuilt on top of `*list.Sorted`, it provides basic set operations. With\r\n`set.SortedSet` you don't have to write code re-implementing sets with the\r\n`map[type]` datatype. Supports: intersection, union, set difference and overlap\r\ntests.\r\n\r\n### Fixed Size Lists\r\n\r\nBoth `list.List` and `list.Sorted` have alternative constructors which make them\r\nfixed size. This prevents them from growing beyond a certain size bound and is\r\nuseful for implementing other data structures on top of them.\r\n\r\n### Serialization\r\n\r\n`list.List`, `list.Sorted`, and `set.SortedSet` all can be serialized provided\r\ntheir contents can be serialized. They are therefore suitable for being sent\r\nover the wire. See this\r\n[example](https://github.com/timtadh/data-structures/blob/master/set/example_serialize_test.go)\r\nfor how to use the serialization.\r\n\r\n## Trees\r\n\r\n### Classic AVL Tree `tree/avl.AvlTree`\r\n\r\nAn AVL tree is a height balanced binary search tree. It is commonly taught in\r\nalgorithms courses.\r\n\r\n### Immutable AVL Tree `tree/avl.ImmutableAvlTree`\r\n\r\nThis version of the classic is immutable and should be thread safe due to\r\nimmutability. However, there is a performance hit:\r\n\r\n    BenchmarkAvlTree           10000            166657 ns/op\r\n    BenchmarkImmutableAvlTree   5000            333709 ns/op\r\n\r\n### Ternary Search Trie `trie.TST`\r\n\r\nA [ternary search trie](\r\nhttp://hackthology.com/ternary-search-tries-for-fast-flexible-string-search-part-1.html)\r\nis a symbol table specialized to byte strings.  Ternary Search Tries (TSTs)\r\nare a particularly fast version of the more common R-Way Trie. They utilize less\r\nmemory allowing them to store more data while still retaining all of the\r\nflexibility of the R-Way Trie. TSTs can be used to build a suffix tree for full\r\ntext string indexing by storing every suffix of each string in addition to the\r\nstring. However, even without storing all of the suffixes it is still a great\r\nstructure for flexible prefix searches. TSTs can be using to implement extremely\r\nfast autocomplete functionality.\r\n\r\n### B+Tree (with and without support for duplicate keys) `tree/bptree.BpTree`\r\n\r\nA\r\n[B+Tree](http://hackthology.com/lessons-learned-while-implementing-a-btree.html)\r\nis a general symbol table usually used for database indices. This implementation\r\nis not currently thread safe. However, unlike many B+Trees it fully supports\r\nduplicate keys making it suitable for use as a Multi-Map. There is also a\r\nvariant which has unique keys, `bptree.BpMap`. B+Trees are storted and efficient\r\nto iterate over making them ideal choices for storing a large amount of data\r\nin sorted order. For storing a **very** large amount of data please utilize the\r\nfs2 version, [fs2/bptree](https://github.com/timtadh/fs2#b-tree). fs2 utilizes\r\nmemory mapped files in order to allow you to store more data than your computer\r\nhas RAM.\r\n\r\n## Hash Tables\r\n\r\n### Classic Separate Chaining Hash Table `hashtable.Hash`\r\n\r\nSee `hashtable/hashtable.go`. An implementation of the classic hash table with\r\nseparate chaining to handle collisions.\r\n\r\n### Linear Hash Table with AVL Tree Buckets `hashtable.LinearHash`\r\n\r\nSee `hashtables/linhash.go`. An implementation of [Linear\r\nHashing](http://hackthology.com/linear-hashing.html), a technique usually used\r\nfor secondary storage hash tables. Often employed by databases and file systems\r\nfor hash indices. This version is mostly instructional see the\r\n[accompanying blog post](\r\nhttp://hackthology.com/an-in-memory-go-implementation-of-linear-hashing.html).\r\nIf you want the \"real\" disk backed version you want to check my\r\n[file-structures](https://github.com/timtadh/file-structures) repository. See\r\nthe `linhash` directory.\r\n\r\n### Benchmarks\r\n\r\n**Note**: these benchmarsk are fairly old and probably not easy to understand.\r\nLook at the relative difference not the absolute numbers as they are misleading.\r\nEach benchmark does many operations per \"test\" which makes it difficult to\r\ncompare these numbers to numbers found elsewhere.\r\n\r\nBenchmarks Put + Remove\r\n\r\n    $ go test -v -bench '.*' \\\r\n    >   github.com/timtadh/data-structures/hashtable\r\n    >   github.com/timtadh/data-structures/tree/...\r\n    >   github.com/timtadh/data-structures/trie\r\n\r\n    BenchmarkGoMap             50000             30051 ns/op\r\n    BenchmarkMLHash            20000             78840 ns/op\r\n    BenchmarkHash              20000             81012 ns/op\r\n    BenchmarkTST               10000            149985 ns/op\r\n    BenchmarkBpTree            10000            185134 ns/op\r\n    BenchmarkAvlTree           10000            193069 ns/op\r\n    BenchmarkImmutableAvlTree   5000            367602 ns/op\r\n    BenchmarkLHash              1000           2743693 ns/op\r\n\r\nBenchmarks Put\r\n\r\n    BenchmarkGoMap            100000             22036 ns/op\r\n    BenchmarkMLHash            50000             52104 ns/op\r\n    BenchmarkHash              50000             53426 ns/op\r\n    BenchmarkTST               50000             69852 ns/op\r\n    BenchmarkBpTree            20000             76124 ns/op\r\n    BenchmarkAvlTree           10000            142104 ns/op\r\n    BenchmarkImmutableAvlTree  10000            302196 ns/op\r\n    BenchmarkLHash              1000           1739710 ns/op\r\n\r\nThe performance of the in memory linear hash (MLHash) is slightly improved since\r\nthe [blog post](\r\nhttp://hackthology.com/an-in-memory-go-implementation-of-linear-hashing.html) do\r\nto the usage of an AVL Tree `tree/avltree.go` instead of an unbalanced binary\r\nsearch tree.\r\n\r\n# Related Projects\r\n\r\n- [fs2](https://github.com/timtadh/fs2) Memory mapped datastructures. A B+Tree,\r\n  a list, and a platform for implementing more.\r\n\r\n- [file-structures](https://github.com/timtadh/file-structures) The previous\r\n  version of fs2 of disk based file-structures. Also includes a linear virtual\r\n  hashing implementation.\r\n\r\n","google":"UA-20145944-2","note":"Don't delete this file! It's used internally to help with page regeneration."}